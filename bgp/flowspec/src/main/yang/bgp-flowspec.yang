module bgp-flowspec {
    yang-version 1;
    namespace "urn:opendaylight:params:xml:ns:yang:bgp-flowspec";
    prefix "bgp-fs";

    import ietf-inet-types { prefix inet; revision-date 2010-09-24; }
    import bgp-message { prefix bgp-msg; revision-date 2013-09-19; }
    import bgp-multiprotocol { prefix bgp-mp; revision-date 2013-09-19; }
    import bgp-rib { prefix bgp-rib; revision-date 2013-09-25; }
    import bgp-types { prefix bgp-t; revision-date 2013-09-19; }
    import network-concepts { prefix netc; revision-date 2013-11-25; }
    import bmp-monitor { prefix bmp-mon; revision-date 2015-05-12; }

    organization "Cisco Systems, Inc.";
    contact "Dana Kutenicsova <dkutenic@cisco.com>";

    description
        "This module contains the base data model of a BGP flow specification.
        It rolls up the definitions contained in RFC5575.

        Copyright (c)2015 Cisco Systems, Inc. All rights reserved.

        This program and the accompanying materials are made available
        under the terms of the Eclipse Public License v1.0 which
        accompanies this distribution, and is available at
        http://www.eclipse.org/legal/epl-v10.html";

    revision "2015-08-07" {
        description
            "IPv6 support";
        reference "https://tools.ietf.org/html/draft-ietf-idr-flow-spec-v6-06";
    }

    revision "2015-01-14" {
        description
            "Initial revision.";
        reference "http://tools.ietf.org/html/rfc5575";
    }

    identity flowspec-subsequent-address-family {
        reference "http://tools.ietf.org/html/rfc5575#section-11";

        base bgp-t:subsequent-address-family;
    }

    typedef fragment {
        reference "http://tools.ietf.org/html/rfc5575#section-4";
        type bits {
            bit last {
                position 4;
            }
            bit first {
                position 5;
            }
            bit is-a {
                position 6;
            }
            bit do-not {
                position 7;
            }
        }
    }

    typedef dscp {
        reference "https://tools.ietf.org/html/rfc2474#section-3";
        type uint8 {
            range "0..63";
        }
    }

    typedef numeric-operand {
        reference "http://tools.ietf.org/html/rfc5575#section-4";
        type bits {
            bit end-of-list {
                position 0;
            }
            bit and-bit {
                position 1;
            }
            bit less-than {
                position 5;
            }
            bit greater-than {
                position 6;
            }
            bit equals {
                position 7;
            }
        }
    }

    typedef bitmask-operand {
        reference "http://tools.ietf.org/html/rfc5575#section-4";
        type bits {
            bit end-of-list {
                position 0;
            }
            bit and-bit {
                position 1;
            }
            bit not {
                position 6;
            }
            bit match {
                position 7;
            }
        }
    }

    grouping numeric-two-byte-value {
        reference "http://tools.ietf.org/html/rfc5575#section-4";
        leaf op {
            type numeric-operand;
        }
        leaf value {
            type uint16;
        }
    }

    grouping numeric-one-byte-value {
        reference "http://tools.ietf.org/html/rfc5575#section-4";
        leaf op {
            type numeric-operand;
        }
        leaf value {
            type uint8;
        }
    }

    grouping bitmask-two-byte-value {
        reference "http://tools.ietf.org/html/rfc5575#section-4";
        leaf op {
            type bitmask-operand;
        }
        leaf value {
            type uint16;
        }
    }

    grouping dscp-value {
        reference "http://tools.ietf.org/html/rfc5575#section-4";
        leaf op {
            type numeric-operand;
        }
        leaf value {
            type dscp;
        }
    }

    grouping fragment-value {
        reference "http://tools.ietf.org/html/rfc5575#section-4";
        leaf op {
            type bitmask-operand;
        }
        leaf value {
            type fragment;
        }
    }

    grouping flowspec-destination {
        reference "http://tools.ietf.org/html/rfc5575#section-4";
        list flowspec {
            choice flowspec-type {
                case port-case {
                    list ports {
                        uses numeric-two-byte-value;
                    }
                }
                case destination-port-case {
                    list destination-ports {
                        uses numeric-two-byte-value;
                    }
                }
                case source-port-case {
                    list source-ports {
                        uses numeric-two-byte-value;
                    }
                }
                case icmp-type-case {
                    list types {
                        uses numeric-one-byte-value;
                    }
                }
                case icmp-code-case {
                    list codes {
                        uses numeric-one-byte-value;
                    }
                }
                case tcp-flags-case {
                    list tcp-flags {
                        uses bitmask-two-byte-value;
                    }
                }
                case packet-length-case {
                    list packet-lengths {
                        uses numeric-two-byte-value;
                    }
                }
                case dscp-case {
                    list dscps {
                        uses dscp-value;
                    }
                }
                case fragment-case {
                    list fragments {
                        uses fragment-value;
                    }
                }
            }
        }
    }

    grouping flowspec-destination-ipv4 {
        reference "http://tools.ietf.org/html/rfc5575#section-4";
        uses flowspec-destination {
            augment "flowspec/flowspec-type" {
                case destination-prefix-case {
                    leaf destination-prefix {
                        type inet:ipv4-prefix;
                    }
                }
                case source-prefix-case {
                    leaf source-prefix {
                        type inet:ipv4-prefix;
                    }
                }
                case protocol-ip-case {
                    list protocol-ips {
                        uses numeric-one-byte-value;
                    }
                }
            }
        }
    }

    grouping flow-label-value {
        reference "https://tools.ietf.org/html/draft-ietf-idr-flow-spec-v6-06#section-3";
        leaf op {
            type numeric-operand;
        }
        leaf value {
            type uint32;
        }
    }

    grouping flowspec-destination-ipv6 {
        reference "https://tools.ietf.org/html/draft-ietf-idr-flow-spec-v6-06#section-3.1";
        uses flowspec-destination {
            augment "flowspec/flowspec-type" {
                case destination-ipv6-prefix-case {
                    leaf destination-prefix {
                        type inet:ipv6-prefix;
                    }
                }
                case source-ipv6-prefix-case {
                    leaf source-prefix {
                        type inet:ipv6-prefix;
                    }
                }
                case next-header-case {
                    list next-headers {
                        uses numeric-one-byte-value;
                    }
                }
                case flow-label-case {
                    list flow-label {
                        uses flow-label-value;
                    }
                }
            }
        }
    }

    augment "/bgp-msg:update/bgp-msg:attributes/bgp-mp:mp-reach-nlri/bgp-mp:advertized-routes/bgp-mp:destination-type" {
        case destination-flowspec-case {
            container destination-flowspec {
                uses flowspec-destination-ipv4;
            }
        }
        case destination-flowspec-ipv6-case {
            container destination-flowspec {
                uses flowspec-destination-ipv6;
            }
        }
    }

    augment "/bgp-msg:update/bgp-msg:attributes/bgp-mp:mp-unreach-nlri/bgp-mp:withdrawn-routes/bgp-mp:destination-type" {
        case destination-flowspec-case {
            container destination-flowspec {
                uses flowspec-destination-ipv4;
            }
        }
        case destination-flowspec-ipv6-case {
            container destination-flowspec {
                uses flowspec-destination-ipv6;
            }
        }
    }

    grouping flowspec-routes {
        container flowspec-routes {
            list flowspec-route {
                leaf route-key {
                    description
                        "The sole function of this leaf
                        to act as the key in the list.
                        Its format does not form the
                        API contract of this model.";
                    type string;
                }
                key "route-key";

                uses flowspec-destination-ipv4;

                uses bgp-rib:route;
            }
        }
    }

    grouping flowspec-ipv6-routes {
        container flowspec-ipv6-routes {
            list flowspec-route {
                leaf route-key {
                    description
                        "The sole function of this leaf
                        to act as the key in the list.
                        Its format does not form the
                        API contract of this model.";
                    type string;
                }
                key "route-key";

                uses flowspec-destination-ipv6;

                uses bgp-rib:route;
            }
        }
    }

    augment "/bgp-msg:update/bgp-msg:attributes/bgp-msg:extended-communities/bgp-msg:extended-community" {
        reference "https://tools.ietf.org/html/rfc5575#section-7";
        case traffic-rate-extended-community-case {
            container traffic-rate-extended-community {
                when "../comm-type = 128 and ../comm-sub-type = 6";
                leaf informative-as {
                    type bgp-t:short-as-number;
                }
                leaf local-administrator {
                    type netc:bandwidth;
                }
            }
        }
        case traffic-action-extended-community-case {
            container traffic-action-extended-community {
                when "../comm-type = 128 and ../comm-sub-type = 7";
                leaf sample {
                    type boolean;
                    default false;
                }
                leaf terminal-action {
                    type boolean;
                    default false;
                }
            }
        }
        case redirect-extended-community-case {
            container redirect-extended-community {
                when "../comm-type = 128 and ../comm-sub-type = 8";
                leaf global-administrator {
                    type bgp-t:short-as-number;
                }
                leaf local-administrator {
                    type binary {
                        length "4";
                    }
                }
            }
        }
        case traffic-marking-extended-community-case {
            container traffic-marking-extended-community {
                when "../comm-type = 128 and ../comm-sub-type = 9";
                leaf global-administrator {
                    type dscp;
                }
            }
        }
    }

    augment "/bgp-rib:application-rib/bgp-rib:tables/bgp-rib:routes" {
        case flowspec-routes-case {
            uses flowspec-routes;
        }
        case flowspec-ipv6-routes-case {
            uses flowspec-ipv6-routes;
        }
    }

    augment "/bgp-rib:bgp-rib/bgp-rib:rib/bgp-rib:loc-rib/bgp-rib:tables/bgp-rib:routes" {
        case flowspec-routes-case {
            uses flowspec-routes;
        }
        case flowspec-ipv6-routes-case {
            uses flowspec-ipv6-routes;
        }
    }

    augment "/bgp-rib:bgp-rib/bgp-rib:rib/bgp-rib:peer/bgp-rib:adj-rib-in/bgp-rib:tables/bgp-rib:routes" {
        case flowspec-routes-case {
            uses flowspec-routes;
        }
        case flowspec-ipv6-routes-case {
            uses flowspec-ipv6-routes;
        }
    }

    augment "/bgp-rib:bgp-rib/bgp-rib:rib/bgp-rib:peer/bgp-rib:effective-rib-in/bgp-rib:tables/bgp-rib:routes" {
        case flowspec-routes-case {
            uses flowspec-routes;
        }
        case flowspec-ipv6-routes-case {
            uses flowspec-ipv6-routes;
        }
    }

    augment "/bgp-rib:bgp-rib/bgp-rib:rib/bgp-rib:peer/bgp-rib:adj-rib-out/bgp-rib:tables/bgp-rib:routes" {
        case flowspec-routes-case {
            uses flowspec-routes;
        }
        case flowspec-ipv6-routes-case {
            uses flowspec-ipv6-routes;
        }
    }

    augment "/bmp-mon:bmp-monitor/bmp-mon:monitor/bmp-mon:router/bmp-mon:peer/bmp-mon:pre-policy-rib/bmp-mon:tables/bmp-mon:routes" {
        case flowspec-routes-case {
            uses flowspec-routes;
        }
        case flowspec-ipv6-routes-case {
            uses flowspec-ipv6-routes;
        }
    }

    augment "/bmp-mon:bmp-monitor/bmp-mon:monitor/bmp-mon:router/bmp-mon:peer/bmp-mon:post-policy-rib/bmp-mon:tables/bmp-mon:routes" {
        case flowspec-routes-case {
            uses flowspec-routes;
        }
        case flowspec-ipv6-routes-case {
            uses flowspec-ipv6-routes;
        }
    }

}
