/*
 * Copyright (c) 2013 Cisco Systems, Inc. and others.  All rights reserved.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v1.0 which accompanies this distribution,
 * and is available at http://www.eclipse.org/legal/epl-v10.html
 */
/**
 * Generated file

 * Generated from: yang module name: reconnect-strategy  yang module local name: never-reconnect-strategy
 * Generated by: org.opendaylight.controller.config.yangjmxgenerator.plugin.JMXGenerator
 * Generated at: Tue Nov 12 13:27:18 CET 2013
 *
 * Do not modify this file unless it is present under src/main directory
 */
package org.opendaylight.controller.config.yang.reconnectstrategy;

import io.netty.util.concurrent.EventExecutor;

import org.opendaylight.controller.config.api.JmxAttributeValidationException;
import org.opendaylight.protocol.framework.NeverReconnectStrategy;
import org.opendaylight.protocol.framework.ReconnectStrategy;
import org.opendaylight.protocol.framework.ReconnectStrategyFactory;

/**
*
*/
public final class NeverReconnectStrategyModule extends
        org.opendaylight.controller.config.yang.reconnectstrategy.AbstractNeverReconnectStrategyModule {

    public NeverReconnectStrategyModule(org.opendaylight.controller.config.api.ModuleIdentifier identifier,
            org.opendaylight.controller.config.api.DependencyResolver dependencyResolver) {
        super(identifier, dependencyResolver);
    }

    public NeverReconnectStrategyModule(org.opendaylight.controller.config.api.ModuleIdentifier identifier,
            org.opendaylight.controller.config.api.DependencyResolver dependencyResolver,
            NeverReconnectStrategyModule oldModule, java.lang.AutoCloseable oldInstance) {
        super(identifier, dependencyResolver, oldModule, oldInstance);
    }

    @Override
    public void validate() {
        super.validate();
        JmxAttributeValidationException.checkNotNull(getTimeout(), "value is not set.", timeoutJmxAttribute);
        JmxAttributeValidationException.checkCondition(getTimeout() >= 0, "value " + getTimeout() + " is less than 0",
                timeoutJmxAttribute);
    }

    @Override
    public java.lang.AutoCloseable createInstance() {
        return new NeverReconnectStrategyFactory(getExecutorDependency(), getTimeout());
    }

    private static final class NeverReconnectStrategyFactory implements ReconnectStrategyFactory, AutoCloseable {

        private final EventExecutor executor;
        private final int timeout;

        public NeverReconnectStrategyFactory(final EventExecutor executor, final int timeout) {
            this.executor = executor;
            this.timeout = timeout;
        }

        @Override
        public void close() throws Exception {
            // no-op
        }

        @Override
        public ReconnectStrategy createReconnectStrategy() {
            return new NeverReconnectStrategy(this.executor, this.timeout);
        }

    }
}
