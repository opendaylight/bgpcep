/**
 * Generated file

 * Generated from: yang module name: bgp-rib-impl  yang module local name: rib-impl
 * Generated by: org.opendaylight.controller.config.yangjmxgenerator.plugin.JMXGenerator
 * Generated at: Wed Nov 06 13:02:32 CET 2013
 *
 * Do not modify this file unless it is present under src/main directory
 */
package org.opendaylight.controller.config.yang.bgp.rib.impl;

import io.netty.util.concurrent.GlobalEventExecutor;

import org.opendaylight.controller.config.api.JmxAttributeValidationException;
import org.opendaylight.protocol.bgp.parser.BGPSessionListener;
import org.opendaylight.protocol.bgp.rib.impl.BGP;
import org.opendaylight.protocol.bgp.rib.impl.BGPPeer;
import org.opendaylight.protocol.bgp.rib.impl.RIBImpl;
import org.opendaylight.protocol.concepts.ListenerRegistration;
import org.opendaylight.protocol.framework.ReconnectStrategy;
import org.opendaylight.protocol.framework.ReconnectStrategyFactory;
import org.opendaylight.protocol.framework.TimedReconnectStrategy;

/**
 *
 */
public final class RIBImplModule
extends
org.opendaylight.controller.config.yang.bgp.rib.impl.AbstractRIBImplModule {

	public RIBImplModule(
			final org.opendaylight.controller.config.api.ModuleIdentifier name,
			final org.opendaylight.controller.config.api.DependencyResolver dependencyResolver) {
		super(name, dependencyResolver);
	}

	public RIBImplModule(
			final org.opendaylight.controller.config.api.ModuleIdentifier name,
			final org.opendaylight.controller.config.api.DependencyResolver dependencyResolver,
			final RIBImplModule oldModule, final java.lang.AutoCloseable oldInstance) {
		super(name, dependencyResolver, oldModule, oldInstance);
	}

	@Override
	public void validate() {
		super.validate();
		JmxAttributeValidationException.checkNotNull(getRibName(),
				"value is not set.", ribNameJmxAttribute);
		JmxAttributeValidationException.checkCondition(!getRibName().isEmpty(),
				"should not be empty string.", ribNameJmxAttribute);
		JmxAttributeValidationException.checkNotNull(getExtensions(),
				"is not set.", extensionsJmxAttribute);
	}

	@Override
	public java.lang.AutoCloseable createInstance() {
		RIBImpl rib = new RIBImpl(getExtensionsDependency(), getDataProviderDependency());
		BGP bgp = getBgpDependency();
		final BGPPeer peer = new BGPPeer(rib, "peer-" + bgp.toString());

		final long reconnects = getReconnectAttempts();
		ListenerRegistration<BGPSessionListener> reg = bgp
				.registerUpdateListener(peer,
						new ReconnectStrategyFactory() {
					@Override
					public ReconnectStrategy createReconnectStrategy() {
						return new TimedReconnectStrategy(
								GlobalEventExecutor.INSTANCE,
								getConnectionTimeout(), 5000, 1.0, null,
								reconnects, null);
					}
				}, new TimedReconnectStrategy(
						GlobalEventExecutor.INSTANCE,
						getConnectionTimeout(), 5000, 1.0, null,
						reconnects, null));
		return new RibImplCloseable(reg, rib);
	}

	private static final class RibImplCloseable implements AutoCloseable {
		private final ListenerRegistration<BGPSessionListener> reg;
		private final RIBImpl innerRib;

		private RibImplCloseable(final ListenerRegistration<BGPSessionListener> reg,
				final RIBImpl innerRib) {
			this.reg = reg;
			this.innerRib = innerRib;
		}

		@Override
		public void close() throws Exception {
			reg.close();
		}
	}
}
