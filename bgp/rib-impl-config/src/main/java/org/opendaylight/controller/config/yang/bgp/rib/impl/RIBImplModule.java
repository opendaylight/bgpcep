/*
 * Copyright (c) 2013 Cisco Systems, Inc. and others.  All rights reserved.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v1.0 which accompanies this distribution,
 * and is available at http://www.eclipse.org/legal/epl-v10.html
 */
/**
 * Generated file

 * Generated from: yang module name: bgp-rib-impl  yang module local name: rib-impl
 * Generated by: org.opendaylight.controller.config.yangjmxgenerator.plugin.JMXGenerator
 * Generated at: Wed Nov 06 13:02:32 CET 2013
 *
 * Do not modify this file unless it is present under src/main directory
 */
package org.opendaylight.controller.config.yang.bgp.rib.impl;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutionException;

import org.opendaylight.controller.config.api.JmxAttributeValidationException;
import org.opendaylight.controller.sal.binding.api.data.DataProviderService;
import org.opendaylight.protocol.bgp.parser.BGPSessionListener;
import org.opendaylight.protocol.bgp.rib.impl.BGP;
import org.opendaylight.protocol.bgp.rib.impl.BGPPeer;
import org.opendaylight.protocol.bgp.rib.impl.RIBImpl;
import org.opendaylight.protocol.bgp.rib.spi.RIBExtensionConsumerContext;
import org.opendaylight.protocol.framework.ReconnectStrategy;
import org.opendaylight.protocol.framework.ReconnectStrategyFactory;
import org.opendaylight.yang.gen.v1.urn.ietf.params.xml.ns.yang.ietf.inet.types.rev100924.AsNumber;
import org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.bgp.rib.rev130925.RibId;
import org.opendaylight.yangtools.concepts.ListenerRegistration;

import com.google.common.base.Preconditions;

/**
 *
 */
public final class RIBImplModule extends org.opendaylight.controller.config.yang.bgp.rib.impl.AbstractRIBImplModule {

	public RIBImplModule(final org.opendaylight.controller.config.api.ModuleIdentifier name,
			final org.opendaylight.controller.config.api.DependencyResolver dependencyResolver) {
		super(name, dependencyResolver);
	}

	public RIBImplModule(final org.opendaylight.controller.config.api.ModuleIdentifier name,
			final org.opendaylight.controller.config.api.DependencyResolver dependencyResolver, final RIBImplModule oldModule,
			final java.lang.AutoCloseable oldInstance) {
		super(name, dependencyResolver, oldModule, oldInstance);
	}

	@Override
	public void validate() {
		super.validate();
		JmxAttributeValidationException.checkNotNull(getExtensions(), "is not set.", this.extensionsJmxAttribute);
		JmxAttributeValidationException.checkNotNull(getRibId(), "is not set.", this.ribIdJmxAttribute);
		JmxAttributeValidationException.checkNotNull(getLocalAs(), "is not set.", this.localAsJmxAttribute);
		JmxAttributeValidationException.checkNotNull(getBgpId(), "is not set.", this.localAsJmxAttribute);
	}

	@Override
	public java.lang.AutoCloseable createInstance() {
		final RibImplCloseable rib = new RibImplCloseable(getRibId(), new AsNumber(getLocalAs()), getBgpId().getBytes(), getExtensionsDependency(), getDataProviderDependency());
		final List<ListenerRegistration<BGPSessionListener>> regs = new ArrayList<>();
		for (final BGP bgp : getBgpDependency()) {
			final BGPPeer peer = new BGPPeer(rib, "peer-" + bgp.toString());

			regs.add(Preconditions.checkNotNull(bgp.registerUpdateListener(peer, new ReconnectStrategyFactory() {
				@Override
				public ReconnectStrategy createReconnectStrategy() {
					return getTcpReconnectStrategyDependency();
				}
			}, getSessionReconnectStrategyDependency())));
		}
		rib.setListenerRegistrations(regs);
		return rib;
	}

	private static final class RibImplCloseable extends RIBImpl implements AutoCloseable {
		private List<ListenerRegistration<BGPSessionListener>> regs;

		private RibImplCloseable(final RibId ribId, final AsNumber localAs, final byte[] bgpId,
				final RIBExtensionConsumerContext extensions, final DataProviderService dps) {
			super(ribId, localAs, bgpId, extensions, dps);
		}

		@Override
		public void close() throws InterruptedException, ExecutionException {
			try {
				super.close();
			} finally {
				for (final ListenerRegistration<BGPSessionListener> r : this.regs) {
					r.close();
				}
			}
		}

		public void setListenerRegistrations(final List<ListenerRegistration<BGPSessionListener>> regs) {
			this.regs = Preconditions.checkNotNull(regs);
		}
	}
}
