/**
 * Generated file

 * Generated from: yang module name: bgp-rib-impl  yang module local name: rib-impl
 * Generated by: org.opendaylight.controller.config.yangjmxgenerator.plugin.JMXGenerator
 * Generated at: Wed Nov 06 13:02:32 CET 2013
 *
 * Do not modify this file unless it is present under src/main directory
 */
package org.opendaylight.controller.config.yang.bgp.rib.impl;

import java.util.ArrayList;
import java.util.List;

import org.opendaylight.controller.config.api.JmxAttributeValidationException;
import org.opendaylight.controller.sal.binding.api.data.DataProviderService;
import org.opendaylight.protocol.bgp.parser.BGPSessionListener;
import org.opendaylight.protocol.bgp.rib.impl.BGP;
import org.opendaylight.protocol.bgp.rib.impl.BGPPeer;
import org.opendaylight.protocol.bgp.rib.impl.RIBImpl;
import org.opendaylight.protocol.bgp.rib.spi.RIBExtensionConsumerContext;
import org.opendaylight.protocol.concepts.ListenerRegistration;
import org.opendaylight.protocol.framework.ReconnectStrategy;
import org.opendaylight.protocol.framework.ReconnectStrategyFactory;
import org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.bgp.rib.rev130925.LocRib;
import org.opendaylight.yangtools.yang.binding.InstanceIdentifier;

import com.google.common.base.Preconditions;

/**
 *
 */
public final class RIBImplModule
extends
org.opendaylight.controller.config.yang.bgp.rib.impl.AbstractRIBImplModule {

	public RIBImplModule(
			final org.opendaylight.controller.config.api.ModuleIdentifier name,
			final org.opendaylight.controller.config.api.DependencyResolver dependencyResolver) {
		super(name, dependencyResolver);
	}

	public RIBImplModule(
			final org.opendaylight.controller.config.api.ModuleIdentifier name,
			final org.opendaylight.controller.config.api.DependencyResolver dependencyResolver,
			final RIBImplModule oldModule, final java.lang.AutoCloseable oldInstance) {
		super(name, dependencyResolver, oldModule, oldInstance);
	}

	@Override
	public void validate() {
		super.validate();
		JmxAttributeValidationException.checkNotNull(getExtensions(),
				"is not set.", extensionsJmxAttribute);
	}

	@Override
	public java.lang.AutoCloseable createInstance() {
		final RibImplCloseable rib = new RibImplCloseable(getExtensionsDependency(), getDataProviderDependency());

		final List<ListenerRegistration<BGPSessionListener>> regs = new ArrayList<>();
		for (final BGP bgp : getBgpDependency()) {
			final BGPPeer peer = new BGPPeer(rib, "peer-" + bgp.toString());

			regs.add(Preconditions.checkNotNull(bgp
					.registerUpdateListener(peer,
							new ReconnectStrategyFactory() {
						@Override
						public ReconnectStrategy createReconnectStrategy() {
							return getTcpReconnectStrategyDependency();
						}
					}, getSessionReconnectStrategyDependency())));
		}
		rib.setListenerRegistrations(regs);
		return rib;
	}

	private static final class RibImplCloseable extends RIBImpl implements AutoCloseable {
		private List<ListenerRegistration<BGPSessionListener>> regs;

		private RibImplCloseable(final RIBExtensionConsumerContext extensions, final DataProviderService dps) {
			super(InstanceIdentifier.builder(LocRib.class).toInstance(), extensions, dps);
		}

		@Override
		public void close() {
			for (ListenerRegistration<BGPSessionListener> r : regs) {
				r.close();
			}
		}

		public void setListenerRegistrations(final List<ListenerRegistration<BGPSessionListener>> regs) {
			this.regs = Preconditions.checkNotNull(regs);
		}
	}
}
