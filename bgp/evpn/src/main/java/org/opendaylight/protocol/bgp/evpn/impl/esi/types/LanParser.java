/*
 * Copyright (c) 2016 Cisco Systems, Inc. and others.  All rights reserved.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v1.0 which accompanies this distribution,
 * and is available at http://www.eclipse.org/legal/epl-v10.html
 */

package org.opendaylight.protocol.bgp.evpn.impl.esi.types;

import com.google.common.base.Preconditions;
import io.netty.buffer.ByteBuf;
import io.netty.buffer.Unpooled;
import org.opendaylight.protocol.util.ByteArray;
import org.opendaylight.protocol.util.ByteBufWriteUtil;
import org.opendaylight.yang.gen.v1.urn.ietf.params.xml.ns.yang.ietf.yang.types.rev100924.IetfYangUtil;
import org.opendaylight.yang.gen.v1.urn.ietf.params.xml.ns.yang.ietf.yang.types.rev100924.MacAddress;
import org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.bgp.evpn.rev160321.EsiType;
import org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.bgp.evpn.rev160321.esi.Esi;
import org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.bgp.evpn.rev160321.esi.esi.LanAutoGeneratedCase;
import org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.bgp.evpn.rev160321.esi.esi.LanAutoGeneratedCaseBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.bgp.evpn.rev160321.esi.esi.lan.auto.generated._case.LanAutoGenerated;
import org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.bgp.evpn.rev160321.esi.esi.lan.auto.generated._case.LanAutoGeneratedBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.bgp.evpn.rev160321.evpn.Evpn;
import org.opendaylight.yangtools.yang.common.QName;
import org.opendaylight.yangtools.yang.data.api.YangInstanceIdentifier.NodeIdentifier;
import org.opendaylight.yangtools.yang.data.api.schema.ContainerNode;

final class LanParser extends AbstractEsiType {
    public static final NodeIdentifier LAN_CASE_NID = new NodeIdentifier(LanAutoGeneratedCase.QNAME);
    static final NodeIdentifier LAN_NID = new NodeIdentifier(LanAutoGenerated.QNAME);
    static final NodeIdentifier MAC_NID = NodeIdentifier.create(QName.create(Evpn.QNAME, "root-bridge-mac-address").intern());
    static final NodeIdentifier BP_NID = NodeIdentifier.create(QName.create(Evpn.QNAME, "root-bridge-priority").intern());

    @Override
    public void serializeEsi(final Esi esi, final ByteBuf buffer) {
        Preconditions.checkArgument(esi instanceof LanAutoGeneratedCase, "Unknown esi instance. Passed %s. Needed LanAutoGeneratedCase.", esi.getClass());
        final ByteBuf body = Unpooled.buffer(ESI_TYPE_LENGTH);
        final LanAutoGenerated lan = ((LanAutoGeneratedCase) esi).getLanAutoGenerated();
        body.writeByte(EsiType.LanAutoGenerated.getIntValue());
        body.writeBytes(IetfYangUtil.INSTANCE.bytesFor(lan.getRootBridgeMacAddress()));
        ByteBufWriteUtil.writeUnsignedShort(lan.getRootBridgePriority(), body);
        body.writeZero(ZERO_BYTE);
        buffer.writeBytes(body);
    }

    @Override
    public Esi serializeEsi(final ContainerNode esi) {
        final LanAutoGeneratedBuilder lanBuilder = new LanAutoGeneratedBuilder();
        lanBuilder.setRootBridgeMacAddress(extractMac(esi));
        lanBuilder.setRootBridgePriority(extractBP(esi));
        return new LanAutoGeneratedCaseBuilder().setLanAutoGenerated(lanBuilder.build()).build();
    }

    private MacAddress extractMac(final ContainerNode lan) {
        if (lan.getChild(MAC_NID).isPresent()) {
            return (MacAddress) lan.getChild(MAC_NID).get().getValue();
        }
        return null;
    }

    private Integer extractBP(final ContainerNode lan) {
        if (lan.getChild(BP_NID).isPresent()) {
            return (Integer) lan.getChild(BP_NID).get().getValue();
        }
        return null;
    }

    @Override
    public Esi parseEsi(final ByteBuf buffer) {
        final LanAutoGenerated t2 = new LanAutoGeneratedBuilder()
            .setRootBridgeMacAddress(IetfYangUtil.INSTANCE.macAddressFor(ByteArray.readBytes(buffer, MAC_ADDRESS_LENGTH)))
            .setRootBridgePriority(buffer.readUnsignedShort()).build();
        return new LanAutoGeneratedCaseBuilder().setLanAutoGenerated(t2).build();
    }
}
