/*
 * Copyright (c) 2016 Cisco Systems, Inc. and others.  All rights reserved.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v1.0 which accompanies this distribution,
 * and is available at http://www.eclipse.org/legal/epl-v10.html
 */
package org.opendaylight.protocol.bgp.evpn.impl.esi.types;

import org.opendaylight.protocol.bgp.evpn.spi.pojo.SimpleEsiTypeRegistry;
import org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.bgp.evpn.rev160321.esi.Esi;
import org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.bgp.evpn.rev160321.esi.esi.ArbitraryCase;
import org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.bgp.evpn.rev160321.esi.esi.AsGeneratedCase;
import org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.bgp.evpn.rev160321.esi.esi.LacpAutoGeneratedCase;
import org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.bgp.evpn.rev160321.esi.esi.LanAutoGeneratedCase;
import org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.bgp.evpn.rev160321.esi.esi.MacAutoGeneratedCase;
import org.opendaylight.yangtools.yang.data.api.schema.ChoiceNode;
import org.opendaylight.yangtools.yang.data.api.schema.ContainerNode;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public final class ESIModelParser {
    private static final Logger LOG = LoggerFactory.getLogger(ESIModelParser.class);

    public static Esi parseModel(final ChoiceNode esi) {
        if (esi.getChild(ArbitraryParser.ARBITRARY_NID).isPresent()) {
            return SimpleEsiTypeRegistry.getInstance().serializeEsiModel(ArbitraryCase.class, (ContainerNode) esi.getChild(ArbitraryParser.ARBITRARY_NID).get());
        } else if (esi.getChild(LacpParser.LACP_NID).isPresent()) {
            return SimpleEsiTypeRegistry.getInstance().serializeEsiModel(LacpAutoGeneratedCase.class, (ContainerNode) esi.getChild(LacpParser.LACP_NID).get());
        } else if (esi.getChild(LanParser.LAN_NID).isPresent()) {
            return SimpleEsiTypeRegistry.getInstance().serializeEsiModel(LanAutoGeneratedCase.class, (ContainerNode) esi.getChild(LanParser.LAN_NID).get());
        } else if (esi.getChild(MacParser.MAC_AUTO_NID).isPresent()) {
            return SimpleEsiTypeRegistry.getInstance().serializeEsiModel(MacAutoGeneratedCase.class, (ContainerNode) esi.getChild(MacParser.MAC_AUTO_NID).get());
        } else if (esi.getChild(RouterIdParser.ROUTER_ID_NID).isPresent()) {
            return SimpleEsiTypeRegistry.getInstance().serializeEsiModel(MacAutoGeneratedCase.class, (ContainerNode) esi.getChild(RouterIdParser.ROUTER_ID_NID).get());
        } else if (esi.getChild(ASGenParser.AS_GEN_NID).isPresent()) {
            return SimpleEsiTypeRegistry.getInstance().serializeEsiModel(AsGeneratedCase.class, (ContainerNode) esi.getChild(ASGenParser.AS_GEN_NID).get());
        } else {
            LOG.warn("Unrecognized Nlri {}", esi);
            return null;
        }
    }
}
