/*
 * Copyright (c) 2016 Cisco Systems, Inc. and others.  All rights reserved.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v1.0 which accompanies this distribution,
 * and is available at http://www.eclipse.org/legal/epl-v10.html
 */
package org.opendaylight.protocol.bgp.evpn.impl.esi.types;

import static com.google.common.base.Preconditions.checkArgument;

import com.google.common.collect.Iterables;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import io.netty.buffer.ByteBuf;
import java.util.Collection;
import org.eclipse.jdt.annotation.NonNull;
import org.opendaylight.protocol.bgp.evpn.spi.EsiParser;
import org.opendaylight.protocol.bgp.evpn.spi.EsiRegistry;
import org.opendaylight.protocol.bgp.evpn.spi.EsiSerializer;
import org.opendaylight.protocol.concepts.HandlerRegistry;
import org.opendaylight.protocol.concepts.MultiRegistry;
import org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.bgp.evpn.rev200120.EsiType;
import org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.bgp.evpn.rev200120.esi.Esi;
import org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.bgp.evpn.rev200120.esi.esi.ArbitraryCase;
import org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.bgp.evpn.rev200120.esi.esi.AsGeneratedCase;
import org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.bgp.evpn.rev200120.esi.esi.LacpAutoGeneratedCase;
import org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.bgp.evpn.rev200120.esi.esi.LanAutoGeneratedCase;
import org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.bgp.evpn.rev200120.esi.esi.MacAutoGeneratedCase;
import org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.bgp.evpn.rev200120.esi.esi.RouterIdGeneratedCase;
import org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.bgp.evpn.rev200120.esi.esi.arbitrary._case.Arbitrary;
import org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.bgp.evpn.rev200120.esi.esi.as.generated._case.AsGenerated;
import org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.bgp.evpn.rev200120.esi.esi.lacp.auto.generated._case.LacpAutoGenerated;
import org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.bgp.evpn.rev200120.esi.esi.lan.auto.generated._case.LanAutoGenerated;
import org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.bgp.evpn.rev200120.esi.esi.mac.auto.generated._case.MacAutoGenerated;
import org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.bgp.evpn.rev200120.esi.esi.router.id.generated._case.RouterIdGenerated;
import org.opendaylight.yangtools.yang.binding.DataContainer;
import org.opendaylight.yangtools.yang.common.QName;
import org.opendaylight.yangtools.yang.data.api.YangInstanceIdentifier.NodeIdentifier;
import org.opendaylight.yangtools.yang.data.api.schema.ChoiceNode;
import org.opendaylight.yangtools.yang.data.api.schema.ContainerNode;
import org.opendaylight.yangtools.yang.data.api.schema.DataContainerChild;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public final class SimpleEsiTypeRegistry implements EsiRegistry {
    private static final Logger LOG = LoggerFactory.getLogger(SimpleEsiTypeRegistry.class);
    private static final @NonNull SimpleEsiTypeRegistry INSTANCE = new SimpleEsiTypeRegistry();
    private static final int CONTENT_LENGTH = 10;
    private static final int ESI_LENGTH = 9;

    private final HandlerRegistry<DataContainer, EsiParser, EsiSerializer> handlers = new HandlerRegistry<>();
    private final MultiRegistry<NodeIdentifier, EsiSerializer> modelHandlers = new MultiRegistry<>();

    private SimpleEsiTypeRegistry() {
        final ArbitraryParser t0Parser = new ArbitraryParser();
        registerEsiParser(t0Parser.getType(), t0Parser);
        handlers.registerSerializer(ArbitraryCase.class, t0Parser);
        registerEsiModelSerializer(Arbitrary.QNAME, t0Parser);

        final LacpParser t1Parser = new LacpParser();
        registerEsiParser(t1Parser.getType(), t1Parser);
        handlers.registerSerializer(LacpAutoGeneratedCase.class, t1Parser);
        registerEsiModelSerializer(LacpAutoGenerated.QNAME, t1Parser);

        final LanParser t2Parser = new LanParser();
        registerEsiParser(t2Parser.getType(), t2Parser);
        handlers.registerSerializer(LanAutoGeneratedCase.class, t2Parser);
        registerEsiModelSerializer(LanAutoGenerated.QNAME, t2Parser);

        final MacParser t3Parser = new MacParser();
        registerEsiParser(t3Parser.getType(), t3Parser);
        handlers.registerSerializer(MacAutoGeneratedCase.class, t3Parser);
        registerEsiModelSerializer(MacAutoGenerated.QNAME, t3Parser);

        final RouterIdParser t4Parser = new RouterIdParser();
        registerEsiParser(t4Parser.getType(), t4Parser);
        handlers.registerSerializer(RouterIdGeneratedCase.class, t4Parser);
        registerEsiModelSerializer(RouterIdGenerated.QNAME, t4Parser);

        final ASGenParser t5Parser = new ASGenParser();
        registerEsiParser(t5Parser.getType(), t5Parser);
        handlers.registerSerializer(AsGeneratedCase.class, t5Parser);
        registerEsiModelSerializer(AsGenerated.QNAME, t5Parser);
    }

    public static @NonNull SimpleEsiTypeRegistry getInstance() {
        return INSTANCE;
    }

    private void registerEsiParser(final EsiType esiType, final EsiParser parser) {
        handlers.registerParser(esiType.getIntValue(), parser);
    }

    private void registerEsiModelSerializer(final QName qname, final EsiSerializer serializer) {
        modelHandlers.register(NodeIdentifier.create(qname), serializer);
    }

    @Override
    @SuppressFBWarnings(value = "NP_NONNULL_RETURN_VIOLATION", justification = "SB does not grok TYPE_USE")
    public Esi parseEsi(final ByteBuf buffer) {
        checkArgument(buffer != null && buffer.isReadable(), "Array of bytes is mandatory. Can't be null or empty.");
        checkArgument(buffer.readableBytes() == CONTENT_LENGTH,
                "Wrong length of array of bytes. Passed: %s;", buffer.readableBytes());

        final EsiParser parser = this.handlers.getParser(EsiType.forValue(buffer.readByte()).getIntValue());
        return parser == null ? null : parser.parseEsi(buffer.readSlice(ESI_LENGTH));
    }

    @Override
    @SuppressFBWarnings(value = "NP_NONNULL_RETURN_VIOLATION", justification = "SB does not grok TYPE_USE")
    public Esi parseEsiModel(final ChoiceNode esiChoice) {
        checkArgument(esiChoice != null, "ESI cannot be null");
        final Collection<DataContainerChild<?, ?>> value = esiChoice.getValue();
        checkArgument(!value.isEmpty(), "ESI may not be empty");
        final ContainerNode cont = (ContainerNode) Iterables.getOnlyElement(value);
        final EsiSerializer serializer = this.modelHandlers.get(cont.getIdentifier());
        if (serializer != null) {
            return serializer.serializeEsi(cont);
        }

        LOG.warn("Unrecognized ESI {}", esiChoice);
        return null;
    }

    @Override
    public void serializeEsi(final Esi esi, final ByteBuf buffer) {
        final EsiSerializer serializer = this.handlers.getSerializer(esi.implementedInterface());
        if (serializer != null) {
            serializer.serializeEsi(esi, buffer);
        }
    }
}
