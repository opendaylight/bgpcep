<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
           xmlns:odl="http://opendaylight.org/xmlns/blueprint/v1.0.0">

  <reference id="BGPExtensionContext" interface="org.opendaylight.protocol.bgp.parser.spi.BGPExtensionConsumerContext"/>
  <reference id="globalBossGroup" interface="io.netty.channel.EventLoopGroup" odl:type="global-boss-group"/>
  <reference id="globalWorkerGroup" interface="io.netty.channel.EventLoopGroup" odl:type="global-worker-group"/>
  <reference id="clusterSingletonServiceProvider" interface="org.opendaylight.mdsal.singleton.common.api.ClusterSingletonServiceProvider"/>

  <bean id="BGPDispatcher" class="org.opendaylight.protocol.bgp.rib.impl.BGPDispatcherImpl">
    <argument>
      <bean factory-ref="BGPExtensionContext" factory-method="getMessageRegistry"/>
    </argument>
    <argument ref="globalBossGroup"/>
    <argument ref="globalWorkerGroup"/>
  </bean>

  <service ref="BGPDispatcher" interface="org.opendaylight.protocol.bgp.rib.impl.spi.BGPDispatcher">
    <!-- The following service properties specify the config system module and instance that correspond to
         this OSGi service which enables the config system module to be restarted when this blueprint
         container is restarted. -->
    <service-properties>
      <entry key="config-module-namespace" value="urn:opendaylight:params:xml:ns:yang:controller:bgp:rib:impl"/>
      <entry key="config-module-name" value="bgp-dispatcher-impl"/>
      <entry key="config-instance-name" value="global-bgp-dispatcher"/>
    </service-properties>
  </service>

  <bean id="BGPPeerRegistry" class="org.opendaylight.protocol.bgp.rib.impl.StrictBGPPeerRegistry"
          factory-method="instance"/>

  <service ref="BGPPeerRegistry" interface="org.opendaylight.protocol.bgp.rib.impl.spi.BGPPeerRegistry"
          odl:type="default">
    <!-- The following service properties specify the config system module and instance that correspond to
         this OSGi service which enables the config system module to be restarted when this blueprint
         container is restarted. -->
    <service-properties>
      <entry key="config-module-namespace" value="urn:opendaylight:params:xml:ns:yang:controller:bgp:rib:impl"/>
      <entry key="config-module-name" value="strict-bgp-peer-registry"/>
      <entry key="config-instance-name" value="global-bgp-peer-registry"/>
    </service-properties>
  </service>

  <reference id="dataBroker" interface="org.opendaylight.controller.md.sal.binding.api.DataBroker" odl:type="pingpong"/>
  <reference id="globalBgpExtensions" interface="org.opendaylight.protocol.bgp.rib.spi.RIBExtensionConsumerContext"/>
  <reference id="codecTreeFactory" interface="org.opendaylight.mdsal.binding.dom.codec.api.BindingCodecTreeFactory"/>
  <reference id="domDataBroker" interface="org.opendaylight.controller.md.sal.dom.api.DOMDataBroker" odl:type="pingpong"/>
  <reference id="bgpOpenConfigMappingService" interface="org.opendaylight.protocol.bgp.openconfig.spi.BGPOpenConfigMappingService"/>
  <reference id="schemaService" interface="org.opendaylight.controller.sal.core.api.model.SchemaService"/>
  <reference id="rpcRegistry" interface="org.opendaylight.controller.sal.binding.api.RpcProviderRegistry"/>

  <bean id="bgpDeployer" class="org.opendaylight.protocol.bgp.rib.impl.config.BgpDeployerImpl">
    <argument value="global-bgp"/>
    <argument ref="blueprintContainer"/>
    <argument ref="blueprintBundleContext"/>
    <argument ref="dataBroker"/>
    <argument ref="bgpOpenConfigMappingService"/>
  </bean>

  <service ref="bgpDeployer" interface="org.opendaylight.protocol.bgp.rib.impl.spi.BgpDeployer"/>

  <bean id="ribImpl" class="org.opendaylight.protocol.bgp.rib.impl.config.RibImpl" scope="prototype">
    <argument ref="clusterSingletonServiceProvider"/>
    <argument ref="globalBgpExtensions"/>
    <argument ref="BGPDispatcher"/>
    <argument ref="codecTreeFactory"/>
    <argument ref="domDataBroker"/>
    <argument ref="schemaService"/>
  </bean>

  <bean id="bgpPeer" class="org.opendaylight.protocol.bgp.rib.impl.config.BgpPeer" scope="prototype">
    <argument ref="rpcRegistry"/>
    <argument ref="BGPPeerRegistry"/>
  </bean>

  <bean id="appPeer" class="org.opendaylight.protocol.bgp.rib.impl.config.AppPeer" scope="prototype"/>

</blueprint>