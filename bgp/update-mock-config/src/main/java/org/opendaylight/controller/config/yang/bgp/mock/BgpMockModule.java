/*
 * Copyright (c) 2013 Cisco Systems, Inc. and others.  All rights reserved.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v1.0 which accompanies this distribution,
 * and is available at http://www.eclipse.org/legal/epl-v10.html
 */
/**
 * Generated file

 * Generated from: yang module name: bgp-mock  yang module local name: bgp-mock
 * Generated by: org.opendaylight.controller.config.yangjmxgenerator.plugin.JMXGenerator
 * Generated at: Wed Nov 06 12:46:58 CET 2013
 *
 * Do not modify this file unless it is present under src/main directory
 */
package org.opendaylight.controller.config.yang.bgp.mock;

import com.google.common.base.Function;
import com.google.common.collect.Collections2;
import com.google.common.collect.Lists;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import javax.annotation.Nullable;

import org.opendaylight.controller.config.api.JmxAttributeValidationException;
import org.opendaylight.protocol.bgp.parser.spi.pojo.ServiceLoaderBGPExtensionProviderContext;
import org.opendaylight.protocol.bgp.rib.mock.BGPMock;
import org.opendaylight.protocol.bgp.util.BinaryBGPDumpFileParser;
import org.opendaylight.protocol.bgp.util.HexDumpBGPFileParser;

/**
*
*/
public final class BgpMockModule extends org.opendaylight.controller.config.yang.bgp.mock.AbstractBgpMockModule {

    private List<byte[]> bgpMessages;

    public BgpMockModule(org.opendaylight.controller.config.api.ModuleIdentifier name,
            org.opendaylight.controller.config.api.DependencyResolver dependencyResolver) {
        super(name, dependencyResolver);
    }

    public BgpMockModule(org.opendaylight.controller.config.api.ModuleIdentifier name,
            org.opendaylight.controller.config.api.DependencyResolver dependencyResolver, BgpMockModule oldModule,
            java.lang.AutoCloseable oldInstance) {
        super(name, dependencyResolver, oldModule, oldInstance);
    }

    @Override
    public void validate() {
        super.validate();
        JmxAttributeValidationException.checkCondition(!(getBinDump() != null && getHexDump() != null),
                "Both 'HexDump' and 'BinDump' contain value", this.binDumpJmxAttribute);
        if (getBinDump() == null && getHexDump() == null) {
            this.bgpMessages = new ArrayList<>();
        } else if (getHexDump() != null) {
            try {
                this.bgpMessages = HexDumpBGPFileParser.parseMessages(getHexDump());
                this.bgpMessages = Lists.newArrayList(fixMessages(this.bgpMessages));
            } catch (final Exception e) {
                JmxAttributeValidationException.wrap(e, "Error while parsing HexDump", this.hexDumpJmxAttribute);
            }
        } else {
            try {
                this.bgpMessages = BinaryBGPDumpFileParser.parseMessages(getBinDump());
            } catch (final Exception e) {
                JmxAttributeValidationException.wrap(e, "Error while parsing BinDump", this.binDumpJmxAttribute);
            }
        }
    }

    @Override
    public java.lang.AutoCloseable createInstance() {
        try {
            return new BGPMock(getEventBusDependency(), ServiceLoaderBGPExtensionProviderContext.createConsumerContext().getMessageRegistry(), this.bgpMessages);
        } catch (final Exception e) {
            throw new RuntimeException("Failed to create consumer context.", e);
        }
    }

    private Collection<byte[]> fixMessages(Collection<byte[]> bgpMessages) {
        return Collections2.transform(bgpMessages, new Function<byte[], byte[]>() {

            @Nullable
            @Override
            public byte[] apply(@Nullable byte[] input) {
                final byte[] ret = new byte[input.length + 1];
                // ff
                ret[0] = -1;
                for (int i = 0; i < input.length; i++) {
                    ret[i + 1] = input[i];
                }
                return ret;
            }
        });
    }
}
