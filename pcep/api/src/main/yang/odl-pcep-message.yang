module odl-pcep-message {
    yang-version 1;
    namespace "urn:opendaylight:params:xml:ns:yang:pcep:message";
    prefix "pcep-msg";

    import odl-pcep-types { prefix pcep-types; revision-date 2025-09-30; }
    import odl-pcep-object { prefix pcep-object; revision-date 2025-09-30; }

    organization "Cisco Systems, Inc.";
    contact "Robert Varga <rovarga@cisco.com>";

    description
        "This module contains the base data model of PCEP Messages defined in:
            - RFC5440: Stateless
            - RFC5886: Monitoring Tools
            - RFC8253: TLS

        Copyright (c)2013 Cisco Systems, Inc. All rights reserved.
        Copyright (c)2025 Orange. All rights reserved.

        This program and the accompanying materials are made available
        under the terms of the Eclipse Public License v1.0 which
        accompanies this distribution, and is available at
        http://www.eclipse.org/legal/epl-v10.html";

    revision "2025-09-30" {
        description "Split old pcep-types into odl-pcep-types, odl-pcep-object and
                     odl-pcep-message following the redesign of pcep yang models.

                     The individual per-message-type notifications are replaced by
                     a single notification which models message types as individual
                     cases in a choice.";
    }

    revision "2018-11-09" {
        description
            "P2MP extension.";
        reference "RFC8306";
    }

    revision "2013-10-07" {
        description
            "Initial revision.";
    }

    notification message {
        description "A PCEP protocol message";
        reference "https://tools.ietf.org/html/rfc5440#section-6";

        leaf version {
            reference "https://tools.ietf.org/html/rfc5440#section-6.1";
            type pcep-types:protocol-version;
            default 1;
        }

        // Message type dispatch using careful naming and mechanics:
        // - message-type choice is mandatory and therefore there has to be exactly one satisfied case
        // - each case is explicitly spelled out as 'foo-message'
        // - each case has exactly one child, which is a 'foo-body' presence container
        //
        // We can therefore use 'MessageType' interface as the common super-interface for all message-specific cases,
        // named 'FooType', each of which contains a single 'FooMessage' container -- which we acquire through
        // 'requireFooMessage()'.
        //
        // We could dispense with the 'case foo-message' declaration without changing YANG semantics, this would result
        // in two distinct 'FooMessage' interfaces being generated, leading to potential confusion.
        //
        // The use of a presence container is critical for two reasons:
        //   1. it allows for messages which do not currently have a body, like KEEPALIVE
        //   2. it is a YANG mandatory enforcement point, e.g. 'mandatory true', 'min-elements 1' in its descendants
        //      are enforced IFF we are dealing with this precise case
        //
        // Since choice/case statements are not data tree nodes, they do not manifest in XML/JSON encoding, so
        // we end up with, for example, these JSON/XML snippets:
        //
        //   "odl-pcep-message:message": {
        //     "open-body": {
        //       "open": {
        //         ...
        //       }
        //     }
        //   }
        //
        //   <message xmlns="urn:opendaylight:params:xml:ns:yang:pcep:message">
        //     <keepalive-body/>
        //   </message>
        //
        //
        // We also retain extensibility as we can perform external augmentation, for example:
        //
        //   module foo {
        //     namespace foo;
        //     prefix foo;
        //
        //     import odl-pcep-message { prefix opm; }
        //
        //     augment /opm:message/opm:message-type {
        //       case foo-message {
        //         container foo-body {
        //           presence "indicates this is a FOO message";
        //
        //           ...
        //         }
        //       }
        //     }
        //
        // which would get encoded as
        //
        //   "odl-pcep-message:message": {
        //     "foo:foo-body": {
        //       ...
        //     }
        //   }
        //
        //
        // Finally, this allows us to make support modular based on supported YANG features, for example:
        //
        //   feature stateful-supported;
        //
        //   case pcrpt-message {
        //     if-feature stateful-supported;
        //     container pcrpt-body {
        //       presence "indicates this is a PCRpt message";
        //       ...
        //     }
        //   }
        //   case pcupd-message {
        //     if-feature stateful-supported;
        //     container pcupd-body {
        //       presence "indicates this is a PCUpd message";
        //       ...
        //     }
        //   }
        //

        choice message-type {
            mandatory true;

            case open-message {
                description "Open Message";
                reference "https://tools.ietf.org/html/rfc5440#section-6.2";

                container open-body {
                    presence "indicates this is an Open message";

                    container open {
                        uses pcep-object:open-object;
                    }
                }
            }

            case keepalive-message {
                description "Keepalive Message";
                reference "https://tools.ietf.org/html/rfc5440#section-6.3";

                container keepalive-body {
                    presence "indicates this is a Keepalive message";
                }
            }

            case pcreq-message {
                description "Path Computation Request Message";
                reference "https://tools.ietf.org/html/rfc5440#section-6.4";

                container pcreq-body {
                    presence "indicates this is a PCReq message";

                    list svec {
                        ordered-by user;
                        uses pcep-object:svec;
                    }

                    list requests {
                        ordered-by user;
                        uses pcep-object:rp-object;

                        container path-key-expansion {
                            when "rp/path-key = true";
                            uses pcep-object:path-key-object;
                        }

                        container segment-computation {
                            when "rp/path-key = false";

                            container p2p {
                                when "../rp/p2mp = false";
                                uses pcep-object:p2p;
                            }

                            container p2mp {
                                reference "https://tools.ietf.org/html/rfc8306#section-3.4";
                                when "../rp/p2mp = true";

                                uses pcep-object:p2mp;
                            }
                        }

                        uses pcep-object:vendor-information-objects;
                    }

                    container monitoring-request {
                        uses pcep-object:monitoring;

                        list pce-id-list {
                            uses pcep-object:pce-id-object;
                        }
                    }
                }
            }

            case pcrep-message {
                description "Path Computation Reply Message";
                reference "https://tools.ietf.org/html/rfc5440#section-6.5";

                container pcrep-body {
                    presence "indicates this is a PCRep message";

                    list replies {
                        // FIXME: min-elements 1 ?
                        uses pcep-object:replies;
                    }
                }
            }

            case pcntf-message {
                description "Notification Message";
                reference "https://tools.ietf.org/html/rfc5440#section-6.6";

                container pcntf-body {
                    presence "indicates this is a PCNtf message";

                    list notifications {
                        list rps {
                            uses pcep-object:rp-object;
                        }

                        list notifications {
                            uses pcep-object:notification-object;
                        }
                    }
                }
            }

            case pcerr-message {
                description "Error Message";
                reference "https://tools.ietf.org/html/rfc5440#section-6.7";

                container pcerr-body {
                    presence "indicates this is a PCErr message";

                    list errors {
                        uses pcep-object:pcep-error-object;
                    }

                    choice error-type {
                        case request-case {
                            container request {
                                list rps {
                                    uses pcep-object:rp-object;
                                }
                            }
                        }

                        case session-case {
                            container session {
                                uses pcep-object:open-object;
                            }
                        }
                    }
                }
            }

            case close-message {
                description "Close Message";
                reference "https://tools.ietf.org/html/rfc5440#section-6.8";

                container close-body {
                    presence "indicates this is a Close message";

                    uses pcep-object:close-object;
                }
            }

            case pcmonreq-message {
                description "PCMonRep Message";
                reference "https://tools.ietf.org/html/rfc5886#section-9.2";

                container pcmonreq-body {
                    presence "indicates this is a PCMonReq message";

                    // FIXME: provide an explicit model
                }
            }

            case pcmonrep-message {
                description "PCMonRep Message";
                reference "https://tools.ietf.org/html/rfc5886#section-9.2";

                container pcmonrep-body {
                    presence "indicates this is a PCMonRep message";

                    uses pcep-object:monitoring-response;
                }
            }

            case starttls-message {
                description "StartTLS Message";
                // FIXME: update to RFC8253
                reference "https://tools.ietf.org/html/draft-ietf-pce-pceps-02#section-3.3";

                // FIXME: rename to 'starttls-body'
                container start-tls-body {
                    presence "indicates this is a StartTLS message";
                }
            }
        }
    }
}
