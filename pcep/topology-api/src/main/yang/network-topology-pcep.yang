module network-topology-pcep {
	// vi: set et smarttab sw=4 tabstop=4:
	yang-version 1;
	namespace "urn:opendaylight:params:xml:ns:yang:topology:pcep";
	prefix "pn";

	import network-topology { prefix nt; revision-date 2013-10-21; }
	import pcep-types { prefix pcep; revision-date 2013-10-05; }
	import pcep-ietf-stateful { prefix stateful; revision-date 2013-12-22; }

	organization "Cisco Systems, Inc.";
	contact "Robert Varga <rovarga@cisco.com>";

	description
		"This module contains the PCEP extensions to base topology model. It
        exposes the LSPs for which a particular node is the head end.

        This module exposes three programming instructions,add-lsp,
        remove-lsp and update-lsp, which map to actively-stateful PCEP
        operations using PCInitiate and PCUpd messages to initiate,
        destroy and udpate LSP configuration. The lifecycle of these
        instructions follows draft-crabbe-pce-pce-initiated-lsp and
        draft-ietf-pce-stateful-pce, completing execution once the head-end
        router has acknowledged operation success. Should the router become
        disconnected, the instruction resolve to Cancelled if the message
        has not been sent into the TCP socket, or Failed it they have.

		Copyright (c)2013 Cisco Systems, Inc. All rights reserved.";

	revision "2013-10-24" {
		description
			"Initial revision.";
		reference "";
	}

	typedef pcc-sync-state {
		type enumeration {
			enum initial-resync {
				description
					"Initial state resynchronization is being performed.";
			}
			enum synchronized {
				description
					"State synchronization has been achieved.";
			}
		}
	}

	grouping topology-pcep-type {
		container topology-pcep {
			presence "indicates a PCEP-aware topology";
		}
	}

	augment "/nt:network-topology/nt:topology/nt:topology-types" {
		uses topology-pcep-type;
	}

	grouping pcep-client-attributes {
        description "Data present in a node which is a PCEP client (PCC).";

		container path-computation-client {
			description
                "PCC-related run-time information. This container is only
                present when the node is connected through PCEP in a PCC
                role.";
            config false;

			container stateful-tlv {
				uses pcep:stateful-capability-tlv;
			}

			leaf state-sync {
				when "../stateful-tlv";
				type pcc-sync-state;
			}

            list reported-lsps {
                leaf name {
                    type pcep:symbolic-path-name;
                }
                key name;

                uses stateful:lsp-object;

                container path {
                    uses pcep:path-definition;
                }
            }
        }
	}

	augment "/nt:network-topology/nt:topology/nt:node" {
        when "../../nt:topology-types/topology-pcep";

		uses pcep-client-attributes;
	}

    typedef failure-type {
        type enumeration {
            enum unsent;
            enum no-ack;
            enum failed;
        }
    }

    grouping lsp-id {
        leaf node {
            type nt:node-ref;
            mandatory true;
        }

        leaf name {
            type pcep:symbolic-path-name;
            mandatory true;
        }
    }

    grouping operation-result {
        leaf failure {
            type failure-type;
        }
    }

    grouping add-lsp-args {
        uses lsp-id;

        container arguments {
            leaf administrative {
                type boolean;
                default true;
            }

			uses pcep:endpoints-object;

            uses pcep:path-definition;
        }
    }

    rpc add-lsp {
        input {
            uses add-lsp-args;
        }
        output {
            uses operation-result;
        }
    }

    grouping remove-lsp-args {
        uses lsp-id;
    }

    rpc remove-lsp {
        input {
            uses remove-lsp-args;
        }
        output {
            uses operation-result;
        }
    }

    grouping update-lsp-args {
        uses lsp-id;

        container arguments {
            leaf administrative {
                type boolean;
                default true;
            }

            uses pcep:path-definition;
        }
    }

    rpc update-lsp {
        input {
            uses update-lsp-args;
        }
        output {
            uses operation-result;
        }
    }

    grouping ensure-lsp-operational-args {
        uses lsp-id;

        container arguments {
            leaf operational {
                type stateful:operational-status;
                mandatory true;
            }
        }
    }

    rpc ensure-lsp-operational {
        description
            "Ensure that the target LSP is provisioned and has specified
             operational status.";

        input {
            uses ensure-lsp-operational-args;
        }
        output {
            uses operation-result;
        }
    }
}

