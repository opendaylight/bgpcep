{
  "comments": [
    {
      "key": {
        "uuid": "da6255ed_27e54da8",
        "filename": "bgp/rib-impl-config/src/main/java/org/opendaylight/yang/gen/v1/urn/opendaylight/params/xml/ns/yang/bgp/rib/impl/rev130409/BGPDispatcherImplModule.java",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 19
      },
      "writtenOn": "2013-10-31T16:13:59Z",
      "side": 1,
      "message": "Why are you committing code auto-generated?",
      "revId": "ddcedaf5cc7998ee56506b0c0775f28877d0ee09",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da6255ed_820ce743",
        "filename": "bgp/rib-impl-config/src/main/java/org/opendaylight/yang/gen/v1/urn/opendaylight/params/xml/ns/yang/bgp/rib/impl/rev130409/BGPDispatcherImplModule.java",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 649
      },
      "writtenOn": "2013-11-02T07:04:01Z",
      "side": 1,
      "message": "This class is generated only once and then it has to be customized by implementing createInstance() at the very least, which ties the auto-generated JMX code with hand-written the implementation. The code generator does not overwrite these classes if they are present.\n\nThe other classes do the same -- note that all of them subclass an abstract class -- which is completely auto-generated.\n\nIf the underlying module changes, the abstract class and the final one will stop being consistent, at which point the programmer has two options:\n1) update the final class to match the changes\n2) delete the final class, re-generate it, and re-add the customizations",
      "parentUuid": "da6255ed_27e54da8",
      "revId": "ddcedaf5cc7998ee56506b0c0775f28877d0ee09",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    }
  ]
}